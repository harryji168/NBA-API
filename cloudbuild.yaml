steps:
# Build the Docker image.
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA', '-f', 'Dockerfile', '.']
  
# Push it to GCR.
- name: gcr.io/cloud-builders/docker
  args: ['push', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA']
  
# Deploy your Flex app from the image in GCR.
- id: 'deploy'
  name: gcr.io/cloud-builders/gcloud
  args: ['run', 'deploy', 'ci-ag', '--image','gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA','--region', 'us-west1','--platform','managed','--allow-unauthenticated','--port','80']

# Prepare env variables required to run db migrations
- id: 'set-migration-runner-env'
  name: 'ubuntu'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "CLOUD_SQL_INSTANCE=$(grep cloud_sql_instances $_APP_MANIFEST | awk '{$1=$1};1' | sed 's/cloud_sql_instances: "//' | sed 's/"//')" >> migrations.env
      echo "GOOGLE_CREDENTIALS=$(base64 -w 0 $_GOOGLE_CREDENTIALS_FILE)" >> migrations.env
      echo "$(grep DB_DATABASE $_APP_MANIFEST | awk '{$1=$1};1' | sed 's/: "/="/')" >> migrations.env
      echo "DB_HOST=127.0.0.1" >> migrations.env
      echo "$(grep DB_PASSWORD $_APP_MANIFEST | awk '{$1=$1};1' | sed 's/: "/="/')" >> migrations.env
      echo "$(grep DB_USERNAME $_APP_MANIFEST | awk '{$1=$1};1' | sed 's/: "/="/')" >> migrations.env
  waitFor: ['download-deployment-bucket']

# Run db migrations
- id: 'run-migrations'
  name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--env-file', 'migrations.env', 'migrations-runner']
  waitFor: ['deploy']
  
# Note that this build pushes this image.
images: ['gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA']

# Build timeout
timeout: '3600s'